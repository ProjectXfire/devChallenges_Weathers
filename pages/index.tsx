import { useEffect, useState } from "react";
// Next
import type { NextPage } from "next";
import Head from "next/head";
// Services
import { getList, getListProxy } from "@services/requests";
// Components
import { WeatherToday } from "@components/weatherToday";
import { WeatherForecast } from "@components/weatherForecast";
import { WeatherSearch } from "@components/weatherSearch";

const Home: NextPage = () => {
  const [cityWeathersForecast, setCityWeathersForecast] = useState<any[]>([]);
  const [cityWeatherToday, setCityWeatherToday] = useState(null);
  const [loading, setLoading] = useState(false);
  const [openSearch, setOpenSearch] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [existSearch, setExistSearch] = useState(true);
  const [isCelsius, setIsCelsius] = useState(true);

  const handleSearchInput = (e: any) => {
    setSearchValue(e.target.value);
    setExistSearch(true);
  };

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      async (pos) => {
        setLoading(true);
        const crd = pos.coords;
        try {
          const responseCity = await getListProxy(
            `https://www.metaweather.com/api/location/search/?lattlong=${crd.latitude},${crd.longitude}`,
            "https://cors-anywhere.herokuapp.com"
          );
          const responseWeathers = await getListProxy(
            `https://www.metaweather.com/api/location/${responseCity[0].woeid}`,
            "https://cors-anywhere.herokuapp.com"
          );
          const consolidateWeathers = responseWeathers.consolidated_weather.map(
            (weather: any) => {
              weather.image = `${weather.weather_state_abbr}.png`;
              return weather;
            }
          );
          setCityWeatherToday(consolidateWeathers[0]);
          consolidateWeathers.shift();
          setCityWeathersForecast(consolidateWeathers);
          setLoading(false);
        } catch (error) {
          console.log(error);
        }
      },
      (err) => {
        console.warn("ERROR(" + err.code + "): " + err.message);
      },
      {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0,
      }
    );
  }, []);

  const searchCityWeather = async () => {
    if (searchValue) {
      const responseCity = await getListProxy(
        `https://www.metaweather.com/api/location/search/?query=${searchValue}`,
        "https://cors-anywhere.herokuapp.com"
      );
      if (responseCity.length === 0) {
        setExistSearch(false);
      } else {
        setExistSearch(true);
        const responseWeathers = await getListProxy(
          `https://www.metaweather.com/api/location/${responseCity[0].woeid}`,
          "https://cors-anywhere.herokuapp.com"
        );
        const consolidateWeathers = responseWeathers.consolidated_weather.map(
          (weather: any) => {
            weather.image = `${weather.weather_state_abbr}.png`;
            return weather;
          }
        );
        setCityWeatherToday(consolidateWeathers[0]);
        consolidateWeathers.shift();
        setCityWeathersForecast(consolidateWeathers);
        setLoading(false);
        setOpenSearch(false);
      }
    }
  };
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {openSearch ? (
          <WeatherSearch
            setOpenSearch={setOpenSearch}
            handleSearchInput={handleSearchInput}
            searchValue={searchValue}
            searchCityWeather={searchCityWeather}
            existSearch={existSearch}
          />
        ) : (
          <WeatherToday
            setOpenSearch={setOpenSearch}
            dataToday={cityWeatherToday}
            loading={loading}
            isCelsius={isCelsius}
          />
        )}
        <WeatherForecast
          dataToday={cityWeatherToday}
          dataForecast={cityWeathersForecast}
          isCelsius={isCelsius}
          setIsCelsius={setIsCelsius}
        />
      </main>
    </div>
  );
};

export default Home;
